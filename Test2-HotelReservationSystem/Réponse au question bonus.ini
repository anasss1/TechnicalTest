 1/Non, ce n’est pas recommandé.

Pourquoi ?
	•	Violation du principe de responsabilité unique (SRP) :
Le Service contient la logique métier des utilisateurs, des chambres, des réservations, de l’affichage, etc. Chaque type d’entité (User, Room, Booking) a sa propre logique métier et devrait avoir sa propre classe de service.
	•	Difficulté à tester / maintenir :
Plus la classe Service devient grande, plus elle devient difficile à tester, à comprendre et à maintenir.
	•	Pas de séparation des préoccupations :
Les responsabilités de gestion des utilisateurs, des chambres et des réservations sont mélangées dans une seule classe, ce qui rend le code rigide à faire évoluer (par exemple, si tu veux changer la logique de facturation uniquement).

Bonne pratique recommandée :
Découper le Service en plusieurs services spécialisés :

class RoomService { ... }
class UserService { ... }
class BookingService { ... }

Et les injecter dans un HotelSystemFacade ou un contrôleur principal si nécessaire.

La règle veut que setRoom(...) modifie le type ou le prix d’une chambre à partir de maintenant, sans modifier les réservations déjà faites.

Pourquoi cette contrainte ?
	•	Pour conserver l’intégrité historique : une réservation doit refléter le prix, le type et l’état de la chambre au moment de la réservation, même si la chambre est modifiée après.
	•	En entreprise, c’est crucial pour :
	•	La comptabilité
	•	Les litiges clients
	•	Les rapports historiques (par exemple : “combien de revenus avons-nous généré à ce prix ?”)

Autre solution possible :
	•	On pourrait modifier directement la chambre (Room), mais cela rendrait toutes les réservations passées incohérentes.

Solution recommandée :
	•	Dans la classe Booking, copier les données de la chambre (type, prix) au moment de la réservation.
	•	Ce que nous avons fait avec :
Ainsi, même si room.type ou room.pricePerNight change plus tard, la réservation reste intègre.